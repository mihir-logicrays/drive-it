org: erezeven
app: driveit
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: service-name
useDotenv: true
package:
  individually: true

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs14.x
  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'lambda:InvokeFunction'
          Resource: '*'
  lambdaHashingVersion: "20201221"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.[t|j]s # Exclude test files
  warmup:
    enabled: true
    events:
      - schedule: rate(5 minutes)
    prewarm: true
    concurrency: 1
  prune:
    automatic: true
    number: 5 # Number of versions to keep

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  depart:
    handler: src/depart.default
    events:
      - http:
          path: RouteDepart
          method: post
  stopDone:
    handler: src/stopDone.default
    events:
      - http:
          path: StopDone
          method: post
  routeDone:
    handler: src/routeDone.default
    events:
      - http:
          path: RouteDone
          method: post
  reserveSeat:
    handler: src/reserveSeat.default
    events:
      - http:
          path: ReserveSeat
          method: post
  cancelSeat:
    handler: src/cancelSeat.default
    events:
      - http:
          path: CancelSeat
          method: post
  driverPingLocation:
    handler: src/driverPingLocation.default
    events:
      - http:
          path: DriverPingLocation
          method: post
  createCorporate:
    handler: src/createCorporate.default
    events:
      - http:
          path: CreateCorporate
          method: post
          cors: true
  updateProfile:
    handler: src/updateProfile.default
    events:
      - http:
          path: UpdateProfile
          method: post
  board:
    handler: src/board.default
    events:
      - http:
          path: Board
          method: post
  pushNotification:
    handler: src/pushNotification.default
    events:
        - http:
            path: pushNotify
            method: post

  getPaths:
    handler: src/getPaths.default
    events:
        - http:
            path: getPaths
            method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-prune-plugin
